// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  email         String   @unique
  emailConsent  Boolean  @default(false)
  currency      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  categories    Category[]
  expenses      Expense[]
  goals         Goal[]
  assets        Asset[]
  liabilities   Liability[]
  netWorthHistory NetWorthHistory[]
  budgets       Budget[]
  savingsAccount SavingsAccount?

  @@map("users")
}

model Category {
  id   String @id @default(cuid())
  name String
  icon String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  expenses Expense[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@map("categories")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model Goal {
  id            String   @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float    @default(0)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("goals")
}

model Asset {
  id        String   @id @default(cuid())
  name      String
  value     Float
  type      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assets")
}

model Liability {
  id        String   @id @default(cuid())
  name      String
  balance   Float
  type      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("liabilities")
}

model NetWorthHistory {
  id        String   @id @default(cuid())
  date      DateTime
  netWorth  Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@map("net_worth_history")
}

model Budget {
  id        String   @id @default(cuid())
  amount    Float
  period    String // "daily", "weekly", "monthly"
  startDate DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("budgets")
}

model SavingsAccount {
  id        String   @id @default(cuid())
  balance   Float    @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("savings_accounts")
}
